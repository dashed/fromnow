language: rust
cache: cargo

env:
  global:
    # This will be part of the release tarball
    - PROJECT_NAME=fromnow
    # comment out this variable if you don't want to build .deb packages on all the targets.
    - MAKE_DEB=yes
    - DEB_MAINTAINER="Alberto Leal <mailforalberto@gmail.com> (github.com/dashed)"
    - DEB_DESCRIPTION="Generate dates and times relative from now."

# AFAICT There are a few ways to set up the build jobs. This one is not the DRYest but I feel is the
# easiest to reason about.
# NOTE Make *sure* you don't remove a reference (&foo) if you are going to dereference it (*foo)
matrix:
  include:
    # Stable channel
    - os: linux
      rust: stable
      env: TARGET=aarch64-unknown-linux-gnu
      # need Trusty because the glibc in Precise is too old and doesn't support 64-bit arm
      dist: trusty
      sudo: required
      # Extra packages only for this job
      addons:
        apt:
          packages: &aarch64_unknown_linux_gnu
            # Transparent emulation
            - qemu-user-static
            - binfmt-support
    - os: linux
      rust: stable
      env: TARGET=armv7-unknown-linux-gnueabihf
      # sudo is needed for binfmt_misc, which is needed for transparent user qemu emulation
      sudo: required
      addons:
        apt:
          packages: &armv7_unknown_linux_gnueabihf
            # Cross compiler and cross compiled C libraries
            - gcc-arm-linux-gnueabihf
            - libc6-armhf-cross
            - libc6-dev-armhf-cross
            # Transparent emulation
            - qemu-user-static
            - binfmt-support
    - os: osx
      rust: stable
      env: TARGET=i686-apple-darwin
    - os: linux
      rust: stable
      env: TARGET=i686-unknown-linux-gnu
      addons:
        apt:
          packages: &i686_unknown_linux_gnu
            # Cross compiler and cross compiled C libraries
            - gcc-multilib
    - os: linux
      rust: stable
      env: TARGET=i686-unknown-linux-musl
    - os: osx
      rust: stable
      env: TARGET=x86_64-apple-darwin
    - os: linux
      rust: stable
      env: TARGET=x86_64-unknown-linux-gnu
    - os: linux
      rust: stable
      env: TARGET=x86_64-unknown-linux-musl
    # Beta channel
    - os: linux
      rust: beta
      env: TARGET=aarch64-unknown-linux-gnu
      dist: trusty
      sudo: required
      addons:
        apt:
          packages: *aarch64_unknown_linux_gnu
    - os: linux
      rust: beta
      env: TARGET=armv7-unknown-linux-gnueabihf
      sudo: required
      addons:
        apt:
          # Use the same packages the stable version uses
          packages: *armv7_unknown_linux_gnueabihf
    - os: osx
      rust: beta
      env: TARGET=i686-apple-darwin
    - os: linux
      rust: beta
      env: TARGET=i686-unknown-linux-gnu
      addons:
        apt:
          packages: *i686_unknown_linux_gnu
    - os: linux
      rust: beta
      env: TARGET=i686-unknown-linux-musl
    - os: osx
      rust: beta
      env: TARGET=x86_64-apple-darwin
    - os: linux
      rust: beta
      env: TARGET=x86_64-unknown-linux-gnu
    - os: linux
      rust: beta
      env: TARGET=x86_64-unknown-linux-musl
    # Nightly channel
    - os: linux
      rust: nightly
      env: TARGET=aarch64-unknown-linux-gnu
      dist: trusty
      sudo: required
      addons:
        apt:
          packages: *aarch64_unknown_linux_gnu
    - os: linux
      rust: nightly
      env: TARGET=armv7-unknown-linux-gnueabihf
      sudo: required
      addons:
        apt:
          # Use the same packages the stable version uses
          packages: *armv7_unknown_linux_gnueabihf
    - os: osx
      rust: nightly
      env: TARGET=i686-apple-darwin
    - os: linux
      rust: nightly
      env: TARGET=i686-unknown-linux-gnu
      addons:
        apt:
          packages: *i686_unknown_linux_gnu
    - os: linux
      rust: nightly
      env: TARGET=i686-unknown-linux-musl
    - os: osx
      rust: nightly
      env: TARGET=x86_64-apple-darwin
    - os: linux
      rust: nightly
      env: TARGET=x86_64-unknown-linux-gnu
    - os: linux
      rust: nightly
      env: TARGET=x86_64-unknown-linux-musl
  allow_failures:
    # Target `i686-unknown-linux-musl` is currently only available on the nightly channel
    - os: linux
      rust: stable
      env: TARGET=i686-unknown-linux-musl
    - os: linux
      rust: beta
      env: TARGET=i686-unknown-linux-musl

before_install:
  - export PATH="$PATH:$HOME/.cargo/bin"

install:
  - bash ci/install.sh

script:
  - bash ci/script.sh

before_deploy:
  - bash ci/before_deploy.sh

deploy:
  provider: releases
  api_key:
    secure: PeIFrWpAw+3nul4rc+P8NBap0OcdYi3q5Fq3SXoScsEKezvIGQypMw8dP4GCTIs+1LToGC7DzMHQuxclUKaRkNE1UnFz2Ym2NchLDP561fgWzzSTD+S0fHZTFaCJQaGsqLj+rdtar+u8MxAcC3ADssPG3LNTGlcroMrSpfU3X/HnI/htZIAI0h370NqOUvhSHPIx9VycWNExO7uu5C9pl7qogLQje8GnLwQ2P6z/uMhASvasO1kuY4TDj6xGvo+DQpSQlcUWy2fLo1kkj3xZrCNJ3vFtvT9QioU2cAVhhpokj7Fd6Og08fwtW0DY0070SQfP/Mp/deiO8HmqtVns66Z8YDiW8i8aV1wGGnbWGxw1GNlKuet3HZcbhHvJk//FMRsw9oKRaMXhTRSjyxEMPdwlbFhHsGVsmvLRBQAyojRo+CNKBwo3UDQUOPXkhnh3qgI0kI3e0GtZnXUxD5lgikAHNfZ/XKugnYcyx2RAxVJESZq5xxHT14s+H2+uK9Lkhi9mfNbe0dsbqksp2fuuihImE0rBRrperpG1L2sNlE/9b1qJLYE9Wnj55EE+l+vC8hExP81R/COvlz7nIDr6Hw4g8rWXlT3c+yhgC/TP9OX5iFTQpRuXyapWFVKpwsbSqYyybYyIs9iK2Dvt66xl+RLVyhW1agTAALEhJoY3zaU=
  file_glob: true
  file: ${PROJECT_NAME}-${TRAVIS_TAG}-${TARGET}.*
  # don't delete the artifacts from previous phases
  skip_cleanup: true
  # deploy when a new tag is pushed
  on:
    # channel to use to produce the release artifacts
    # NOTE make sure you only release *once* per target
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true

branches:
  only:
    # Pushes and PR to the master branch
    - master
    # IMPORTANT Ruby regex to match tags. Required, or travis won't trigger deploys when a new tag
    # is pushed. This regex matches semantic versions like v1.2.3-rc4+2016.02.22
    - /^v\d+\.\d+\.\d+.*$/

notifications:
  email:
    on_success: never
